Horizontal
----------

Gesucht ist zunächst der Längengrad (also horizontale Richtung), bei dem
die Sonne gerade den Tageshöchststand erreicht hat. Es wird angenommen,
dass um 12:00 UTC dies beim nullten Längengrad der Fall ist. Die
Abweichung durch die Zeitgleichung wird zunächst nicht berücksichtigt.

Testweise an der Shell:

$ date -u '+%H %M %S' | awk '{ print (($1 * 60 * 60 + $2 * 60 + $3) - (86400 / 2)) * (-360 / 86400) }'

Erklärung:

(($1 * 60 * 60 + $2 * 60 + $3) - (86400 / 2)) * (-360 / 86400)
  |              |         |     \_________/    \____________/
  |              |         |          |                |
  |              |         |          |                \- Grad pro
  |              |         |          |                   Sekunde.
  |              |         |          |
  |              |         |          \- Hierdurch Differenz zum UTC-
  |              |         |             Mittag in Sekunden.
  |              |         |
  |              |         \- Sekunden der UTC-Zeit.
  |              |
  |              \- Minuten,
  |
  \- Stunden,


Gute numerische Näherung der Zeitgleichung:
	http://lexikon.astronomie.info/zeitgleichung/

	WOZ - MOZ = -0.171*sin(0.0337 * T + 0.465) - 0.1299*sin(0.01787 * T - 0.168)

	wobei T die Tagnummer darstellt. Der erste Januar hat die Nummer 1,
	der zweite Januar die Nummer 2 usw. Das Ergebnis wird in Stunden
	ausgegeben, und nicht etwa in Minuten.

Man muss den UTC-Mittag also um diesen Wert korrigieren. An der Shell
kann das dann so aussehen:

$ date -u '+%H %M %S %j' | awk '{ print (($1 * 60 * 60 + $2 * 60 + $3) - (86400 / 2 + ((-0.171 * sin(0.0337 * $4 + 0.465) - 0.1299 * sin(0.01787 * $4 - 0.168)) * -3600))) * (-360 / 86400) }'

Und für das konkrete Beispiel, was in der Wikipedia angegeben wurde
(https://de.wikipedia.org/wiki/Mittag), es kommt also korrekterweise die
geographische Länge von München heraus:

$ date -d '2008-07-12 13:19 CEST' -u '+%H %M %S %j' | awk '{ print (($1 * 60 * 60 + $2 * 60 + $3) - (86400 / 2 + ((-0.171 * sin(0.0337 * $4 + 0.465) - 0.1299 * sin(0.01787 * $4 - 0.168)) * -3600))) * (-360 / 86400) }'
11.6356



Vertikal
--------

Das Astronomie-Lexikon hat hier wieder eine schöne Näherung:

	Deklination = 0.4095 * sin(0.016906 * (T - 80.086))

T ist wieder der Tag des Jahres. Im Laufe eines Tages ist die Schwankung
so gering, dass das wie bei der Zeitgleichung ausreicht.

Das ist auch gleichzeitig die geographische Breite, bei der die Sonne am
"heutigen" Mittag im Zenith stehen wird.



Licht-Schatten-Grenze
---------------------

Bei der ganzen Aktion wird angenommen, dass die Sonne paralleles Licht
auf eine kugelförmige Erde wirft. Das heißt, dass genau eine Kugelhälfte
beleuchtet ist.

Geht man (im Winter) von dem Punkt, an dem die Sonne gerade im Zenith
steht, 90° nach Norden, so erreicht man einen Punkt auf dem Großkreis,
der die beleuchtete und unbeleuchtete Hälfte der Erde trennt. Es ist
außerdem der nordpolnächste Punkt auf diesem Großkreis. Mit diesem Punkt
als Grundlage ist der Großkreis parametrisierbar (siehe Bronstein, 6.
Auflage, 3.204, Seite 179) und zwar praktischerweise in
Kugelkoordinaten.

(Eine theoretische Alternative wäre gewesen, diesen Großkreis in
kartesischen Koordinaten zu berechnen. In der Praxis ist das durch die
Umrechnungen von Kugelkoordinaten zu kartesischen Koordinaten und zurück
sehr umständlich.)

Durch die Periodizität der verwendeten Funktionen funktioniert das Ganze
zu anderen Jahreszeiten genauso (obwohl dann phi_n > 90°, was als
Kugelkoordinate eigentlich keinen Sinn ergibt).

Die Gleichung der Kurve ist:

	tan(phi_n) * cos(lambda - lambda_n) = tan(phi)

Dabei ist (lambda_n, phi_n) der nordpolnächste Punkt und (lambda, phi)
ein Punkt auf dem Großkreis. Die Gleichung kann man nun nach phi oder
lambda auflösen und jeweils über die andere Variable iterieren.

Die meiste Zeit des Jahres über ergibt die Iteration über lambda eine
schöne Kurve. Um den 20. März und 20. September herum jedoch fällt der
nordpolnächste Punkt mit dem Nordpol zusammen und man erhält einen
Großkreis durch den Nordpol -- die eine Hälfte dieses Kreises hat an
allen Punkten lambda = -180° und die andere Hälfte hat lambda = +180°.
Bei einer Iteration über lambda bekommt man in diesen Fällen also ein
sehr instabiles Ergebnis.

Ein Workaround ist, zu diesen Zeitpunkten nach lambda aufzulösen und
über phi zu iterieren. Nachteilig daran sind folgende Punkte:

	- Erstens, dass man phi nicht einfach von phi_n bis -phi_n iterieren
	  lassen kann, denn gerade in den Bereichen nahe phi_n und -phi_n
	  bewegt man sich immer sehr nahe an NaN-Werten (passiert, wenn man
	  phi_n über- oder -phi_n unterschreitet). Falls das vorkommt, dann
	  fehlen Liniensegmente.

	- Außerdem kann man phi nicht linear zwischen phi_n und -phi_n
	  laufen lassen, sondern sollte mehr Punkte nahe phi_n und -phi_n
	  generieren (das wird im Code durch die atan-Transformation von
	  iscaled durchgeführt).

	- Schließlich kann es passieren, dass das errechnete lambda den
	  Wertebereich zwischen -180 und 180 verlässt. (Das ist bei der
	  Iteration über lambda nicht möglich, da der Arkustangens immer
	  saubere Werte auf einer "Seite" liefert.)

Die meiste Zeit des Jahres wird also nach phi aufgelöst und über lambda
iteriert und nur zu kritischen Zeitpunkten umgekehrt. Die fehlenden
Liniensegmente sind übrigens gut verschmerzbar, da sie an den Polen
fehlen, also in Bereichen, die man bei den üblichen Projektionen ohnehin
nicht sieht.
